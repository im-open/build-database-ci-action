name: Build SQL Database

description: Build a SQL Database with Flyway

inputs:
  db-server-name:
    description: The name of the database server to build the database on.
    required: true
  db-server-port:
    description: The port that the database server listens on.
    required: false
    default: '1433'
  db-name:
    description: The name of the database to bubild.
    required: true
  install-mock-db-objects:
    description: Specifies whether mock db objects should be used to fill out dependencies. If set to true mock-db-object-nuget-feed-url must also be set, otherwise an error will occur. The expected value is true or false.
    required: false
    default: 'false'
  mock-db-object-nuget-feed-url:
    description: The url to the nuget feed containing the mock database objects. This needs to be set if the install-mock-db-objects flag is set to avoid errors.
    required: false
  nuget-username:
    description: The username for the user to authenticate with the nuget feed. This should be set if install-mock-db-objects is true.
    required: false
  nuget-password:
    description: The password for the user to authenticate with the nuget feed. This should be set if install-mock-db-objects is true.
    required: false
  incremental:
    description: Specifies whether to drop and recreate the database before building, or apply to the current database. The expected value is true or false.
    required: false
    default: 'false'
  run-tests:
    description: Specifies whether or not to run tests.
    required: false
    default: 'false'
  drop-db-after-build:
    description: Specifies whether or not to drop the database after building. Set this to false if other steps in the job rely on the database existing.
    required: false
    default: 'true'
  should-validate-migrations:
    description: Determines whether flyway will validate the migration scripts before running them.
    required: true
    default: 'false'
  seed-data:
    description: A switch specifying whether or not to seed data into the database.
    required: false
    default: 'false'
  db-username:
    description: The username to log into the database with. If not set, then integrated security will be used.
    required: false
  db-password:
    description: The password associated with the db-username used for login.
    required: false

runs:
  using: 'composite'
  steps:
    - name: Install Database Dependencies
      shell: pwsh
      run: ${{ github.action_path }}/scripts/installpowershelldependencies.ps1

    - name: Build Database
      shell: pwsh
      run: |
        $secureNugetPassword = if(!!"${{ inputs.nuget-password }}") { ConvertTo-SecureString "${{ inputs.nuget-password }}" -AsPlainText -Force } else { $null }
        $secureDbPassword = if(!!"${{ inputs.db-password }}") { ConvertTo-SecureString "${{ inputs.db-password }}" -AsPlainText -Force } else { $null }

        ${{ github.action_path }}/scripts/build-flyway.ps1 `
        -dbServerName "${{ inputs.db-server-name }}" `
        -dbServerPort "${{ inputs.db-server-port }}" `
        -dbName "${{ inputs.db-name }}" `
        -installMockDbObjects:$${{ inputs.install-mock-db-objects }} `
        -mockDbObjectNugetFeedUrl "${{ inputs.mock-db-object-nuget-feed-url }}" `
        -nugetUser "${{ inputs.nuget-username }}" `
        -nugetPassword $secureNugetPassword `
        -incremental:$${{ inputs.incremental }} `
        -runTests:$${{ inputs.run-tests }} `
        -dropDbAfterBuild:$${{ inputs.drop-db-after-build }} `
        -validateMigrations:$${{ inputs.should-validate-migrations }} `
        -seedData:$${{ inputs.seed-data }} `
        -dbUsername "${{ inputs.db-username }}" `
        -dbPassword $secureDbPassword
