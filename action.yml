name: Build SQL Database

description: Build a SQL Database with Flyway

inputs:
  db-server-name:
    description: The name of the database server to build the database on.
    required: true
  db-server-port:
    description: The port that the database server listens on.
    required: false
    default: '1433'
  db-name:
    description: The name of the database to bubild.
    required: true
  use-integrated-security:
    description: Use domain integrated security. If false, a db-username and db-password should be specified. If true, those parameters will be ignored if specified.
    required: true
    default: 'false'
  db-username:
    description: The username to use to login to the database. This is required if use-integrated-security is false, otherwise it's optional and will be ignored.
    required: false
  db-password:
    description: The password for the user logging in to the database. This is required if use-integrated-security is false, otherwise it's optional and will be ignored.
    required: false
  migration-files-path:
    description: The path to the base directory containing the migration files to process with flyway
    required: true
  install-mock-db-objects:
    description: Specifies whether mock db objects should be used to fill out dependencies. If set to true mock-db-object-dependency-list must also be set, otherwise an error will occur. The expected value is true or false.
    required: false
    default: 'false'
  mock-db-object-dependency-list:
    description: A json string containing a list of objects with the name of the dependency package, the version, and the url where the package is stored.
    required: true
  incremental:
    description: Specifies whether to drop and recreate the database before building, or apply to the current database. The expected value is true or false. If true, the create-database-file property will not be used.
    required: false
    default: 'false'
  create-database-file:
    description: The file path to the sql file that initializes the database. This script will only be run if the incremental property is false.
    required: false
  run-tests:
    description: Specifies whether or not to run tests. If true, test-files-path should also be set.
    required: false
    default: 'false'
  test-files-path:
    description: The path to the files with tSQLt tests.
    required: false
  drop-db-after-build:
    description: Specifies whether or not to drop the database after building. Set this to false if other steps in the job rely on the database existing.
    required: false
    default: 'true'
  should-validate-migrations:
    description: Determines whether flyway will validate the migration scripts before running them.
    required: true
    default: 'false'
  seed-data:
    description: A switch specifying whether or not to seed data into the database. If true, seed-data-files-path must also be set.
    required: false
    default: 'false'
  seed-data-files-path:
    description: The path to the files with seeding database.
    required: false
  managed-schemas:
    description: A comma separated list of schemas that are to be managed by flyway.
    required: true
    default: 'dbo'

runs:
  using: 'composite'
  steps:
    - name: Install SQL Powershell Module
      shell: pwsh
      run: |
        if (get-module SqlServer -ListAvailable) {
          Write-Output "Importing SqlServer module"
          Import-Module SqlServer
        }
        else {
          Write-Output "Installing SqlServer module"
          $repo = Get-PSRepository -Name PSGallery -ErrorAction SilentlyContinue
          if (!$repo) {
            Write-Output "Registering PSGallery as as PSRepository"
            Register-PSRepository -Name "PSGallery" -SourceLocation "https://www.powershellgallery.com/api/v2/" -InstallationPolicy Trusted
          }
          PowerShellGet\Install-Module SqlServer -Repository PSGallery -Force -AllowClobber
          Import-Module SqlServer
        }

    - name: Run Create Database Script
      if: ${{ inputs.incremental == 'false' }}
      shell: pwsh
      run: |
        Write-Output "Creating the database"
        [System.Security.SecureString] $securePassword = if(!!"${{ inputs.db-password }}") { ConvertTo-SecureString "${{ inputs.db-password }}" -AsPlainText -Force } else { $null }

        ${{ github.action_path }}/src/run-sql-command-for-file.ps1 `
          -dbServer "${{ inputs.db-server-name }},${{ inputs.db-server-port }}" `
          -dbName "master" `
          -pathToFile "${{ inputs.create-database-file }}" `
          -sqlCmdVariables "DatabaseName = ${{ inputs.db-name }}" `
          -useIntegratedSecurity:$${{ inputs.use-integrated-security }} `
          -username "${{ inputs.db-username }}" `
          -password $securePassword

    - name: Install DB Dependencies
      if: ${{ inputs.install-mock-db-objects == 'true' }}
      shell: pwsh
      run: |
        Write-Output "Installing dependencies"

        $parsedDependencies = ConvertFrom-Json "${{ inputs.mock-db-object-dependency-list }}"
        ${{ github.action_path }}\src\dependency-scripts\download-db-dependencies.ps1 -dependencies $parsedDependencies

    - name: Run DB Dependencies
      if: ${{ inputs.install-mock-db-objects == 'true' }}
      shell: pwsh
      run: |
        [System.Security.SecureString] $securePassword = if(!!"${{ inputs.db-password }}") { ConvertTo-SecureString "${{ inputs.db-password }}" -AsPlainText -Force } else { $null }

        ${{ github.action_path }}\src\dependency-scripts\run-db-dependencies.ps1 `
          -dbServer "${{ inputs.db-server-name }},${{ inputs.db-server-port }}" `
          -dbName "${{ inputs.db-name }}" `
          -useIntegratedSecurity:$${{ inputs.use-integrated-security }} `
          -username "${{ inputs.db-username }}" `
          -password $securePassword

    - name: Run migration scripts
      shell: pwsh
      run: |
        Write-Output "Running migration scripts"

        [System.Security.SecureString] $securePassword = if(!!"${{ inputs.db-password }}") { ConvertTo-SecureString "${{ inputs.db-password }}" -AsPlainText -Force } else { $null }
        $baselineVersion = 0

        if ('${{ inputs.incremental }}' -eq 'true')
        {
          $baselineVersion = 0.1 # this will allow us to ignore missing migrations when running flyway
        }

        ${{ github.action_path }}/src/run-flyway/run-flyway-migrate.ps1 `
          -dbServer "${{ inputs.db-server-name }}" `
          -dbServerPort "${{ inputs.db-server-port }}" `
          -dbName "${{ inputs.db-name }}" `
          -pathToMigrationFiles "${{ inputs.migration-files-path }}" `
          -migrationHistoryTable "MigrationHistory" `
          -baselineVersion $baselineVersion `
          -managedSchemas "${{ inputs.managed-schemas }}" `
          -validateMigrations:$${{ inputs.should-validate-migrations }} `
          -useIntegratedSecurity:$${{ inputs.use-integrated-security }} `
          -username "${{ inputs.db-username }}" `
          -password $securePassword

    - name: Run test setup scripts
      if: ${{ inputs.run-tests == 'true' }}
      shell: pwsh
      run: |
        Write-Output "Setting up tests"
        [System.Security.SecureString] $securePassword = if(!!"${{ inputs.db-password }}") { ConvertTo-SecureString "${{ inputs.db-password }}" -AsPlainText -Force } else { $null }

        ${{ github.action_path }}/src/run-flyway/run-flyway-migrate.ps1 `
          -dbServer "${{ inputs.db-server-name }}" `
          -dbServerPort "${{ inputs.db-server-port }}" `
          -dbName "${{ inputs.db-name }}" `
          -pathToMigrationFiles "${{ inputs.test-files-path }}" `
          -migrationHistoryTable "TestingHistory" `
          -managedSchemas "${{ inputs.managed-schemas }}" `
          -validateMigrations `
          -useIntegratedSecurity:$${{ inputs.use-integrated-security }} `
          -username "${{ inputs.db-username }}" `
          -password $securePassword

    - name: Output toggle schema binding queries for test objects
      if: ${{ inputs.run-tests == 'true' }}
      id: schema-binding-queries
      shell: pwsh
      run: |
        Write-Output "Toggling off schema binding for tests"

        $fakeTablePattern = "tSQLt.FakeTable\s+(@TableName\s*=\s*)?N?'([^']+)'"
        $objectNames = (
          Get-ChildItem ./src/TempTests/*.sql -File -Recurse |
          Where-Object { $_.Name.StartsWith("R__") } |
          ForEach-Object {
            Get-Content -Raw $_.FullName |
            Select-String -Pattern $fakeTablePattern -AllMatches |
            ForEach-Object { $_.Matches } |
            ForEach-Object { $_.Groups[2].Value }
          } |
          Sort-Object |
          Get-Unique
        )
        $objectNames = $objectNames -join ','
        Write-Output $objectNames

        if (-Not [string]::IsNullOrEmpty($objectNames))
        {
          $setStatements = "
            SET NOEXEC OFF;
            SET ANSI_NULL_DFLT_ON ON;
            SET ANSI_NULLS ON;
            SET ANSI_PADDING ON;
            SET ANSI_WARNINGS ON;
            SET ARITHABORT ON;
            SET CONCAT_NULL_YIELDS_NULL ON;
            SET QUOTED_IDENTIFIER ON;
            SET XACT_ABORT ON;"

          $getToggleQuery = "
            $setStatements
            DECLARE @unbindSql VARCHAR(MAX);
            DECLARE @rebindSql VARCHAR(MAX);

            BEGIN TRY
              EXEC DBA.usp_ToggleSchemaBindingBatch @objectList = N'$objectNames', @mode = 'VARIABLE', @isSchemaBoundOnly = 1, @unbindSql = @unbindSql OUTPUT, @rebindSql = @rebindSql OUTPUT;
              SELECT @unbindSql as unbindSql, @rebindSql as rebindSql;
            END TRY
            BEGIN CATCH
              THROW;
            END CATCH;"

          $toggleQueryTimeout = 120

          Write-Output "Getting schemabinding toggle queries"
          $toggleschemabinding = Invoke-Sqlcmd -ServerInstance "${{ inputs.db-server-name }},${{ inputs.db-server-port }}" -Database "${{ inputs.db-name }}" -Query "$getToggleQuery" -QueryTimeout $toggleQueryTimeout -MaxCharLength 150000
          Write-Output "Setting removeSchemaBindingSql"
          $removeSchemaBindingSql = "
            $setStatements
            BEGIN TRY
              BEGIN TRANSACTION;
              " + $toggleschemabinding.unbindSql + "
              COMMIT TRANSACTION;
            END TRY
            BEGIN CATCH
              IF (@@TRANCOUNT > 0)
              BEGIN
                ROLLBACK TRANSACTION;
              END;

              THROW;
              RETURN;
            END CATCH;"

          Write-Output "Setting restoreSchemaBindingSql"
          $restoreSchemaBindingSql = "
            $setStatements
            BEGIN TRY
              BEGIN TRANSACTION;
              " + $toggleschemabinding.rebindSql + "
              COMMIT TRANSACTION;
            END TRY
            BEGIN CATCH
              IF (@@TRANCOUNT > 0)
              BEGIN
                ROLLBACK TRANSACTION;
              END;

              THROW;
              RETURN;
            END CATCH;"

          # Substitute newline characters so we can output them
          $removeSchemaBindingSql = $removeSchemaBindingSql.Replace("%", "%25")
          $removeSchemaBindingSql = $removeSchemaBindingSql.Replace("`n", "%0A")
          $removeSchemaBindingSql = $removeSchemaBindingSql.Replace("`r", "%0D")
          $removeSchemaBindingSql = $removeSchemaBindingSql.Replace('"', '`"')

          $restoreSchemaBindingSql = $restoreSchemaBindingSql.Replace("%", "%25")
          $restoreSchemaBindingSql = $restoreSchemaBindingSql.Replace("`n", "%0A")
          $restoreSchemaBindingSql = $restoreSchemaBindingSql.Replace("`r", "%0D")
          $restoreSchemaBindingSql = $restoreSchemaBindingSql.Replace('"', '`"')

          echo "::set-output name=remove_schema_binding_query::$removeSchemaBindingSql"
          echo "::set-output name=restore_schema_binding_query::$restoreSchemaBindingSql"
        }

    - name: Toggle off schema binding for objects that need it
      if: ${{ inputs.run-tests == 'true' }}
      shell: pwsh
      run: |
        $removeSchemaBindingSql = "${{ steps.schema-binding-queries.outputs.remove_schema_binding_query }}"
        if (-Not [string]::IsNullOrEmpty($removeSchemaBindingSql))
        {
          Invoke-Sqlcmd -ServerInstance "${{ inputs.db-server-name }},${{ inputs.db-server-port }}" -Database "${{ inputs.db-name }}" -Query "$removeSchemaBindingSql" -QueryTimeout 120
        }

    - name: Run tSqlt tests
      if: ${{ inputs.run-tests == 'true' }}
      shell: pwsh
      run: |
        Write-Output "Running tSQLt tests"

        [System.Security.SecureString] $securePassword = if(!!"${{ inputs.db-password }}") { ConvertTo-SecureString "${{ inputs.db-password }}" -AsPlainText -Force } else { $null }

        ${{ github.action_path }}/src/tsqlt/run-tsqlt.ps1 `
          -dbServer "${{ inputs.db-server-name }}" `
          -dbServerPort "${{ inputs.db-server-port }}" `
          -dbName "${{ inputs.db-name }}" `
          -queryTimeout "${{ inputs.query-timeout }}" `
          -useIntegratedSecurity:$${{ inputs.use-integrated-security }} `
          -username "${{ inputs.db-username }}" `
          -password $securePassword

    - name: Print test results
      if: ${{ inputs.run-tests == 'true' }}
      id: results
      shell: pwsh
      run: ${{ github.action_path }}/src/tsqlt/print-results.ps1

    - name: Output test results file path
      if: ${{ inputs.run-tests == 'true' }}
      id: results-file
      shell: bash
      run: echo "::set-output name=file_path::${{ github.action_path }}/test-results/test-results.xml"

    - name: Toggle schema binding back on
      if: ${{ inputs.run-tests == 'true' }}
      shell: pwsh
      run: |
        Write-Output "Toggling on schema binding"

        $restoreSchemaBindingSql = "${{ steps.schema-binding-queries.outputs.restore_schema_binding_query }}"
        if (-Not [string]::IsNullOrEmpty($restoreSchemaBindingSql))
        {
          Invoke-Sqlcmd -ServerInstance "${{ inputs.db-server-name }},${{ inputs.db-server-port }}" -Database "${{ inputs.db-name }}" -Query "$restoreSchemaBindingSql" -QueryTimeout 120
        }

    - name: Run seed data scripts
      if: ${{ inputs.seed-data == 'true' }}
      shell: pwsh
      run: |
        Write-Output "Seeding data into the database"

        [System.Security.SecureString] $securePassword = if(!!"${{ inputs.db-password }}") { ConvertTo-SecureString "${{ inputs.db-password }}" -AsPlainText -Force } else { $null }

        ${{ github.action_path }}/src/run-flyway/run-flyway-migrate.ps1 `
          -dbServer "${{ inputs.db-server-name }}" `
          -dbServerPort "${{ inputs.db-server-port }}" `
          -dbName "${{ inputs.db-name }}" `
          -pathToMigrationFiles "${{ inputs.seed-data-files-path }}" `
          -migrationHistoryTable "SeedDataHistory" `
          -managedSchemas "${{ inputs.managed-schemas }}" `
          -validateMigrations `
          -useIntegratedSecurity:$${{ inputs.use-integrated-security }} `
          -username "${{ inputs.db-username }}" `
          -password $securePassword
