name: Build SQL Database

description: Build a SQL Database with Flyway

inputs:
  db-server-name:
    description: The name of the database server to build the database on.
    required: true
  db-server-port:
    description: The port that the database server listens on.
    required: false
    default: '1433'
  db-name:
    description: The name of the database to bubild.
    required: true
  install-mock-db-objects:
    description: Specifies whether mock db objects should be used to fill out dependencies. If set to true mock-db-object-dependency-list must also be set, otherwise an error will occur. The expected value is true or false.
    required: false
    default: 'false'
  mock-db-object-dependency-list:
    description: A json string containing a list of objects with the name of the dependency package, the version, and the url where the package is stored.
    required: true
  nuget-username:
    description: The username for the user to authenticate with the nuget feed. This should be set if install-mock-db-objects is true.
    required: false
  nuget-password:
    description: The password for the user to authenticate with the nuget feed. This should be set if install-mock-db-objects is true.
    required: false
  incremental:
    description: Specifies whether to drop and recreate the database before building, or apply to the current database. The expected value is true or false.
    required: false
    default: 'false'
  run-tests:
    description: Specifies whether or not to run tests.
    required: false
    default: 'false'
  drop-db-after-build:
    description: Specifies whether or not to drop the database after building. Set this to false if other steps in the job rely on the database existing.
    required: false
    default: 'true'
  should-validate-migrations:
    description: Determines whether flyway will validate the migration scripts before running them.
    required: true
    default: 'false'
  seed-data:
    description: A switch specifying whether or not to seed data into the database.
    required: false
    default: 'false'
  use-integrated-security:
    description: Use domain integrated security. If false, a db-username and db-password should be specified. If true, those parameters will be ignored if specified.
    required: true
    default: 'false'
  db-username:
    description: The username to use to login to the database. This is required if use-integrated-security is false, otherwise it's optional and will be ignored.
    required: false
  db-password:
    description: The password for the user logging in to the database. This is required if use-integrated-security is false, otherwise it's optional and will be ignored.
    required: false

runs:
  using: 'composite'
  steps:
    # - name: Install Database Dependencies
    #   shell: pwsh
    #   run: ${{ github.action_path }}/scripts/installpowershelldependencies.ps1

    # - name: Build Database
    #   shell: pwsh
    #   run: |
    #     $secureNugetPassword = if(!!"${{ inputs.nuget-password }}") { ConvertTo-SecureString "${{ inputs.nuget-password }}" -AsPlainText -Force } else { $null }
    #     $secureDbPassword = if(!!"${{ inputs.db-password }}") { ConvertTo-SecureString "${{ inputs.db-password }}" -AsPlainText -Force } else { $null }

    #     ${{ github.action_path }}/scripts/build-flyway.ps1 `
    #     -dbServerName "${{ inputs.db-server-name }}" `
    #     -dbServerPort "${{ inputs.db-server-port }}" `
    #     -dbName "${{ inputs.db-name }}" `
    #     -installMockDbObjects:$${{ inputs.install-mock-db-objects }} `
    #     -mockDbObjectNugetFeedUrl "${{ inputs.mock-db-object-nuget-feed-url }}" `
    #     -nugetUser "${{ inputs.nuget-username }}" `
    #     -nugetPassword $secureNugetPassword `
    #     -incremental:$${{ inputs.incremental }} `
    #     -runTests:$${{ inputs.run-tests }} `
    #     -dropDbAfterBuild:$${{ inputs.drop-db-after-build }} `
    #     -validateMigrations:$${{ inputs.should-validate-migrations }} `
    #     -seedData:$${{ inputs.seed-data }} `
    #     -dbUsername "${{ inputs.db-username }}" `
    #     -dbPassword $secureDbPassword

    # - name: Install and run dependency scripts
    #   uses: im-open/install-and-run-db-dependency-scripts@v1.1.0
    #   with:
    #     db-server-name: '${{ env.DB_SERVER_NAME }},${{ env.DB_SERVER_PORT }}'
    #     db-name: '${{ env.DB_NAME }}'
    #     username: '${{ env.SQL_LOGIN_USERNAME }}'
    #     password: ${{ secrets.ACTIONS_RUNNER_MSSQL_SA_PWD }} # This is an org-level secret
    #     # TODO: Fill in this list with real values.
    #     dependency-list: >-
    #       [
    #       {
    #       'version': '1.0.0',
    #       'packageName': 'Some_Dependency',
    #       'nugetUrl': '${{ env.ARTIFACTORY_URL }}/Path/To/Some_Dependency.1.0.0.nupkg'
    #       },
    #       {
    #       'version': '1.0.0',
    #       'packageName': 'Some_Other_Dependency',
    #       'nugetUrl': '${{ env.ARTIFACTORY_URL }}/Path/To/Some_Other_Dependency.1.0.0.nupkg'
    #       }
    #       ]

    - name: Install DB Dependencies
      if: ${{ inputs.install-mock-db-objects == 'true' }}
      shell: pwsh
      run: |
        $parsedDependencies = ConvertFrom-Json "${{ inputs.mock-db-object-dependency-list }}"
        ${{ github.action_path }}\src\dependency-scripts\download-db-dependencies.ps1 -dependencies $parsedDependencies

    - name: Run DB Dependencies
      if: ${{ inputs.install-mock-db-objects == 'true' }}
      shell: pwsh
      run: |
        [System.Security.SecureString] $securePassword = if(!!"${{ inputs.db-password }}") { ConvertTo-SecureString "${{ inputs.db-password }}" -AsPlainText -Force } else { $null }

        ${{ github.action_path }}\src\dependency-scripts\run-db-dependencies.ps1 `
          -dbServer "${{ inputs.db-server-name }},${{ inputs.db-server-port }}" `
          -dbName "${{ inputs.db-name }}" `
          -useIntegratedSecurity:$${{ inputs.use-integrated-security }} `
          -username "${{ inputs.db-username }}" `
          -password $securePassword

    # - name: Run Migration Scripts
    #   uses: im-open/run-flyway-command@v1.3.0
    #   with:
    #     db-server-name: '${{ env.DB_SERVER_NAME }}'
    #     db-server-port: '${{ env.DB_SERVER_PORT }}'
    #     db-name: '${{ env.DB_NAME }}'
    #     migration-files-path: '${{ env.MIGRATIONS_PATH }}'
    #     flyway-command: 'migrate'
    #     migration-history-table: 'MigrationHistory' # TODO: Update this if your flyway migration history table is something different
    #     managed-schemas: '${{ env.FLYWAY_MANAGED_SCHEMAS }}'
    #     validate-migrations: 'true'
    #     use-integrated-security: 'false' # Integrated Security only works on Windows runners
    #     username: '${{ env.SQL_LOGIN_USERNAME }}' # If using integrated security the only place this is used is in the migration history table
    #     password: '${{ secrets.ACTIONS_RUNNER_MSSQL_SA_PWD }}' # This is an org-level secret

    # # Run the migration scripts containing the tSQLt tests
    # - name: Set up the tests
    #   uses: im-open/run-flyway-command@v1.3.0
    #   with:
    #     db-server-name: '${{ env.DB_SERVER_NAME }}'
    #     db-server-port: '${{ env.DB_SERVER_PORT }}'
    #     db-name: '${{ env.DB_NAME }}'
    #     migration-files-path: '' # TODO: Add the path to your testing migration scripts here
    #     flyway-command: 'migrate'
    #     migration-history-table: 'TestingHistory'
    #     managed-schemas: '${{ env.FLYWAY_MANAGED_SCHEMAS }}'
    #     validate-migrations: 'true'
    #     use-integrated-security: 'false' # Integrated Security only works on Windows runners
    #     username: '${{ env.SQL_LOGIN_USERNAME }}' # If using integrated security the only place this is used is in the migration history table
    #     password: '${{ secrets.ACTIONS_RUNNER_MSSQL_SA_PWD }}' # This is an org-level secret

    # # TODO: The following schema binding steps are necessary for some teams' tests.
    # #       Remove the steps if your tests do not require schema binding to be off.
    # # NOTE: The following step uses the DBA.usp_ToggleSchemaBindingBatch stored procedure.
    # #       If your project doesn't have this sproc, remove the three schema binding steps.
    # - name: Output toggle schema binding queries for test objects
    #   id: schema-binding-queries
    #   shell: pwsh
    #   run: |
    #     $fakeTablePattern = "tSQLt.FakeTable\s+(@TableName\s*=\s*)?N?'([^']+)'"
    #     $objectNames = (
    #       Get-ChildItem ./src/TempTests/*.sql -File -Recurse |
    #       Where-Object { $_.Name.StartsWith("R__") } |
    #       ForEach-Object {
    #         Get-Content -Raw $_.FullName |
    #         Select-String -Pattern $fakeTablePattern -AllMatches |
    #         ForEach-Object { $_.Matches } |
    #         ForEach-Object { $_.Groups[2].Value }
    #       } |
    #       Sort-Object |
    #       Get-Unique
    #     )
    #     $objectNames = $objectNames -join ','
    #     Write-Output $objectNames

    #     if (-Not [string]::IsNullOrEmpty($objectNames))
    #     {
    #       $setStatements = "
    #         SET NOEXEC OFF;
    #         SET ANSI_NULL_DFLT_ON ON;
    #         SET ANSI_NULLS ON;
    #         SET ANSI_PADDING ON;
    #         SET ANSI_WARNINGS ON;
    #         SET ARITHABORT ON;
    #         SET CONCAT_NULL_YIELDS_NULL ON;
    #         SET QUOTED_IDENTIFIER ON;
    #         SET XACT_ABORT ON;"

    #       $getToggleQuery = "
    #         $setStatements
    #         DECLARE @unbindSql VARCHAR(MAX);
    #         DECLARE @rebindSql VARCHAR(MAX);

    #         BEGIN TRY
    #           EXEC DBA.usp_ToggleSchemaBindingBatch @objectList = N'$objectNames', @mode = 'VARIABLE', @isSchemaBoundOnly = 1, @unbindSql = @unbindSql OUTPUT, @rebindSql = @rebindSql OUTPUT;
    #           SELECT @unbindSql as unbindSql, @rebindSql as rebindSql;
    #         END TRY
    #         BEGIN CATCH
    #           THROW;
    #         END CATCH;"

    #       $toggleQueryTimeout = 120

    #       Write-Output "Getting schemabinding toggle queries"
    #       $toggleschemabinding = Invoke-Sqlcmd -ServerInstance "${{ env.DB_SERVER_NAME }},${{ env.DB_SERVER_PORT }}" -Database "${{ env.DB_NAME }}" -Query "$getToggleQuery" -QueryTimeout $toggleQueryTimeout -MaxCharLength 150000
    #       Write-Output "Setting removeSchemaBindingSql"
    #       $removeSchemaBindingSql = "
    #         $setStatements
    #         BEGIN TRY
    #           BEGIN TRANSACTION;
    #           " + $toggleschemabinding.unbindSql + "
    #           COMMIT TRANSACTION;
    #         END TRY
    #         BEGIN CATCH
    #           IF (@@TRANCOUNT > 0)
    #           BEGIN
    #             ROLLBACK TRANSACTION;
    #           END;

    #           THROW;
    #           RETURN;
    #         END CATCH;"

    #       Write-Output "Setting restoreSchemaBindingSql"
    #       $restoreSchemaBindingSql = "
    #         $setStatements
    #         BEGIN TRY
    #           BEGIN TRANSACTION;
    #           " + $toggleschemabinding.rebindSql + "
    #           COMMIT TRANSACTION;
    #         END TRY
    #         BEGIN CATCH
    #           IF (@@TRANCOUNT > 0)
    #           BEGIN
    #             ROLLBACK TRANSACTION;
    #           END;

    #           THROW;
    #           RETURN;
    #         END CATCH;"

    #       # Substitute newline characters so we can output them
    #       $removeSchemaBindingSql = $removeSchemaBindingSql.Replace("%", "%25")
    #       $removeSchemaBindingSql = $removeSchemaBindingSql.Replace("`n", "%0A")
    #       $removeSchemaBindingSql = $removeSchemaBindingSql.Replace("`r", "%0D")
    #       $removeSchemaBindingSql = $removeSchemaBindingSql.Replace('"', '`"')

    #       $restoreSchemaBindingSql = $restoreSchemaBindingSql.Replace("%", "%25")
    #       $restoreSchemaBindingSql = $restoreSchemaBindingSql.Replace("`n", "%0A")
    #       $restoreSchemaBindingSql = $restoreSchemaBindingSql.Replace("`r", "%0D")
    #       $restoreSchemaBindingSql = $restoreSchemaBindingSql.Replace('"', '`"')

    #       echo "::set-output name=remove_schema_binding_query::$removeSchemaBindingSql"
    #       echo "::set-output name=restore_schema_binding_query::$restoreSchemaBindingSql"
    #     }

    # # TODO: Remove this if you don't need to toggle schema binding for tests
    # - name: Toggle off schema binding for objects that need it
    #   shell: pwsh
    #   run: |
    #     $removeSchemaBindingSql = "${{ steps.schema-binding-queries.outputs.remove_schema_binding_query }}"
    #     if (-Not [string]::IsNullOrEmpty($removeSchemaBindingSql))
    #     {
    #       Invoke-Sqlcmd -ServerInstance "${{ env.DB_SERVER_NAME }},${{ env.DB_SERVER_PORT }}" -Database "${{ env.DB_NAME }}" -Query "$removeSchemaBindingSql" -QueryTimeout 120
    #     }

    # - name: Run tSqlt tests
    #   id: run-tests
    #   uses: im-open/tsqlt-test-runner@initial-implementation # v1.0.0
    #   with:
    #     db-server-name: '${{ env.DB_SERVER_NAME }}'
    #     db-server-port: '${{ env.DB_SERVER_PORT }}'
    #     db-name: '${{ env.DB_NAME }}'
    #     query-timeout: '120' # 2 minutes
    #     use-integrated-security: 'false'
    #     db-username: '${{ env.SQL_LOGIN_USERNAME }}'
    #     db-password: '${{ secrets.ACTIONS_RUNNER_MSSQL_SA_PWD }}' # This is an org-level secret

    # # TODO: Remove this if you don't need to toggle schema binding for tests
    # - name: Toggle schema binding back on
    #   shell: pwsh
    #   run: |
    #     $restoreSchemaBindingSql = "${{ steps.schema-binding-queries.outputs.restore_schema_binding_query }}"
    #     if (-Not [string]::IsNullOrEmpty($restoreSchemaBindingSql))
    #     {
    #       Invoke-Sqlcmd -ServerInstance "${{ env.DB_SERVER_NAME }},${{ env.DB_SERVER_PORT }}" -Database "${{ env.DB_NAME }}" -Query "$restoreSchemaBindingSql" -QueryTimeout 120
    #     }

    # # Load seed data for integration tests
    # # TODO: Remove this if you don't have integration tests or don't have seed data they rely on
    # - name: Load seed data into the database
    #   uses: im-open/run-flyway-command@v1.3.0
    #   with:
    #     db-server-name: '${{ env.DB_SERVER_NAME }}'
    #     db-server-port: '${{ env.DB_SERVER_PORT }}'
    #     db-name: '${{ env.DB_NAME }}'
    #     migration-files-path: '' # TODO: Add the path to your seed data migration scripts
    #     flyway-command: 'migrate'
    #     migration-history-table: 'SeedDataHistory'
    #     managed-schemas: '${{ env.FLYWAY_MANAGED_SCHEMAS }}'
    #     validate-migrations: 'true'
    #     use-integrated-security: 'false' # Integrated Security only works on Windows runners
    #     username: '${{ env.SQL_LOGIN_USERNAME }}' # If using integrated security the only place this is used is in the migration history table
    #     password: '${{ secrets.ACTIONS_RUNNER_MSSQL_SA_PWD }}' # This is an org-level secret
